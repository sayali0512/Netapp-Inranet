import gzip
import base64
import json

prodList_c = ""
catList_c = "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"

prodList = json.loads(gzip.decompress(base64.b64decode(prodList_c)))
catList = json.loads(gzip.decompress(base64.b64decode(catList_c)))

prodList = sorted(prodList, key=len, reverse=True)
catList = sorted(catList, key=len, reverse=True)

def get_safe_meta_data_value(field):
    try:
        return document.get_meta_data_value(field)[-1]
    except Exception as e:
        return ''

content = get_safe_meta_data_value('ptcontent')
content = content.lower()
def checkIfExist(x):
  global content
  if content.find(x.casefold()) != -1:
    return True
  else:
    return False

prodObjects = []
prodResults = filter(checkIfExist, prodList)
for prd in list(prodResults):
  if content.find(prd.casefold()) != -1:
      prodObjects.append({"pos":str(content.find(prd.casefold())),"value":prd})
      content = content.replace(prd.lower(),"")
prodObjects.sort(key=lambda x: int(x['pos']), reverse=False)

catObjects = []
catResults = filter(checkIfExist, catList)
for cat in list(catResults):
  if content.find(cat.casefold()) != -1:
      catObjects.append({'pos':str(content.find(cat.casefold())),'value':cat})
      content = content.replace(cat.lower(),"")
catObjects.sort(key=lambda x: int(x["pos"]), reverse=False)

pp = ''
if len(prodObjects) !=0:
  if len(catObjects) !=0:
    if int(prodObjects[0]['pos']) <= int(catObjects[0]['pos']):
      pp = prodObjects[0]['value'] + '|Product'
    else:
      pp = catObjects[0]['value'] + '|Cat'
  else:
    pp = prodObjects[0]['value'] + '|Product'
elif len(catObjects) !=0:
  pp = catObjects[0]['value'] + '|Cat'

document.add_meta_data({'pp': pp})


if len(prodObjects) !=0:
  ptnt_products = ""
  ptemp = [] 
  for obj in prodObjects:
    if obj['value'] not in ptemp:
      ptemp.append(obj['value'])
  ptnt_products = ';'.join(map(str, ptemp))
  document.add_meta_data({'ptnt_products': ptnt_products})

if len(catObjects) !=0:
  ptnt_cats = ""
  ctemp = [] 
  for obj in catObjects:
    if obj['value'] not in ctemp:
      ctemp.append(obj['value'])
  ptnt_cats = ';'.join(map(str, ctemp))
  document.add_meta_data({'ptnt_cats': ptnt_cats})
